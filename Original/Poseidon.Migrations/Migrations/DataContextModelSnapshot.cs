// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Poseidon.Repositories.ResourceMaps;

#nullable disable

namespace Poseidon.Migrations.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ComponentId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BalancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ports")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BalancerId");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("SubApplicationId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.ComponentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ComponentTypeId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComponetTypes");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.SubApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubApplicationId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("SubApplications");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Balancers.Balancer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BalancerId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ports")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Balancers");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.Environment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EnvironmentId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.Infraestructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InfraestructureId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Infraestructures");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServerId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.ServerApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServerApplicationId")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId")
                        .IsUnique()
                        .HasFilter("[ComponentId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("ServerApplications");
                });

            //F5 Properties

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Rule", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("RuleId")
                    .HasDefaultValueSql("NEWID()");

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<DateTime?>("DateDisable")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateInsert")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateModify")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("VirtualId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.ToTable("Rules");
            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Irule", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("IruleId")
                    .HasDefaultValueSql("NEWID()");

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<DateTime?>("DateDisable")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateInsert")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateModify")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Redirect")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("RuleId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id");

                b.ToTable("Irules");
            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Monitor",b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("MonitorId")
                    .HasDefaultValueSql("NEWID()");

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<DateTime?>("DateDisable")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateInsert")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateModify")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Adaptive")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Cipherlist")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Compatibility")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Debug")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Defaults_from")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Destination")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("get")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Interval")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Server")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Service")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("IP_DSCP")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RECV")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RECV_disable")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Reverse")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SEND")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ssl_profile")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("time_until_up")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("timeout")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("username")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Monitors");
            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Node", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("NodeId")
                    .HasDefaultValueSql("NEWID()");

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<DateTime?>("DateDisable")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateInsert")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateModify")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("IP")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Port")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey ("Id");

                b.ToTable("Nodes");
            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Pool", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("PoolId")
                    .HasDefaultValueSql("NEWID()");

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<DateTime?>("DateDisable")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateInsert")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateModify")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("BalancerType")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("MonitorId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("MonitorId");

                b.Property<Guid>("VirtualId")
                    .HasColumnType("uniqueidentifier")
                    .HasColumnName("VirtualId");

                b.HasKey("Id");

                b.ToTable("Pools");
            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Rule", b =>
            {
                b.Property<Guid>("Id")
                   .ValueGeneratedOnAdd()
                   .HasColumnType("uniqueidentifier")
                   .HasColumnName("RuleId")
                   .HasDefaultValueSql("NEWID()");

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<DateTime?>("DateDisable")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateInsert")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateModify")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("VirtualId")
                   .HasColumnType("uniqueidentifier")
                   .HasColumnName("VirtualId");

                b.HasKey("Id");

                b.ToTable("Rules");
            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Virtual", b =>
            {
                b.Property<Guid>("Id")
                  .ValueGeneratedOnAdd()
                  .HasColumnType("uniqueidentifier")
                  .HasColumnName("VirtualId")
                  .HasDefaultValueSql("NEWID()");

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<DateTime?>("DateDisable")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateInsert")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateModify")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");
                
                b.Property<Guid>("PoolId")
                   .HasColumnType("uniqueidentifier")
                   .HasColumnName("PoolId");

                b.HasKey("Id");

                b.ToTable("Virtuals");
            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.NodePool", b =>
            {
                b.Property<Guid>("Id")
                 .ValueGeneratedOnAdd()
                 .HasColumnType("uniqueidentifier")
                 .HasColumnName("VirtualId")
                 .HasDefaultValueSql("NEWID()");

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<DateTime?>("DateDisable")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateInsert")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("DateModify")
                    .HasColumnType("datetime2");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("PoolId")
                   .HasColumnType("uniqueidentifier")
                   .HasColumnName("PoolId");

                b.Property<Guid>("NodeId")
                   .HasColumnType("uniqueidentifier")
                   .HasColumnName("NodeId");

                b.HasKey("Id");

                b.ToTable("NodePool");
            });

            //F5 Realtions configuration

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Rule", b =>
            {
                b.HasKey("Id");
                b.HasMany("Poseidon.Entities.ResourceMaps.F5.Irule", "Irules")
                    .WithOne()
                    .OnDelete(DeleteBehavior.SetNull)
                    .IsRequired(false);
            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Node", b =>
            {
                b.HasKey("Id");
                b.HasMany("Poseidon.Entities.ResourceMaps.F5.Pool", "Pools")
                    .WithMany("Members");

            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.NodePool", b =>
            {
                b.HasKey("NodeId", "PoolId");

                b.HasOne("Poseidon.Entities.ResourceMaps.F5.Pool", "Pool")
                    .WithMany() // Es necesario especificar .WithMany()
                    .HasForeignKey("PoolId");

                b.HasOne("Poseidon.Entities.ResourceMaps.F5.Node", "Node")
                    .WithMany() // Es necesario especificar .WithMany()
                    .HasForeignKey("NodeId");
            });


            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Pool", b =>
            {
                b.HasKey("Id");
                b.HasOne("Poseidon.Entities.ResourceMaps.F5.Monitor", "Monitor")
                    .WithOne()
                    .HasForeignKey("Poseidon.Entities.ResourceMaps.F5.Pool", "MonitorId")
                    .OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.F5.Virtual", b =>
            {
                b.HasKey("Id");
                b.HasOne("Poseidon.Entities.ResourceMaps.F5.Pool", "Pool")
                    .WithOne()
                    .HasForeignKey("Poseidon.Entities.ResourceMaps.F5.Pool","PoolId")
                    .OnDelete(DeleteBehavior.SetNull);
                b.HasMany("Poseidon.Entities.ResourceMaps.F5.Rule", "Rules")
                    .WithOne()
                    .OnDelete(DeleteBehavior.SetNull);
            });

            //FIN F5 Configuration

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.Application", b =>
                {
                    b.HasOne("Poseidon.Entities.ResourceMaps.Products.Product", "Product")
                        .WithMany("Applications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.Component", b =>
                {
                    b.HasOne("Poseidon.Entities.ResourceMaps.Balancers.Balancer", "Balancer")
                        .WithMany("Components")
                        .HasForeignKey("BalancerId");

                    b.HasOne("Poseidon.Entities.ResourceMaps.Applications.ComponentType", "ComponentType")
                        .WithMany("Components")
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Poseidon.Entities.ResourceMaps.Applications.SubApplication", "SubApplication")
                        .WithMany("Components")
                        .HasForeignKey("SubApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Balancer");

                    b.Navigation("ComponentType");

                    b.Navigation("SubApplication");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.SubApplication", b =>
                {
                    b.HasOne("Poseidon.Entities.ResourceMaps.Applications.Application", "Application")
                        .WithMany("SubAplications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.Role", b =>
                {
                    b.HasOne("Poseidon.Entities.ResourceMaps.Servers.Server", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.Server", b =>
                {
                    b.HasOne("Poseidon.Entities.ResourceMaps.Servers.Environment", "Environment")
                        .WithMany("Servers")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Poseidon.Entities.ResourceMaps.Products.Product", "Product")
                        .WithMany("Servers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.ServerApplication", b =>
                {
                    b.HasOne("Poseidon.Entities.ResourceMaps.Applications.Component", "Component")
                        .WithOne("ServerApplication")
                        .HasForeignKey("Poseidon.Entities.ResourceMaps.Servers.ServerApplication", "ComponentId");

                    b.HasOne("Poseidon.Entities.ResourceMaps.Servers.Role", "Role")
                        .WithMany("ServerApplications")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.Application", b =>
                {
                    b.Navigation("SubAplications");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.Component", b =>
                {
                    b.Navigation("ServerApplication");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.ComponentType", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Applications.SubApplication", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Balancers.Balancer", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Products.Product", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.Environment", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.Role", b =>
                {
                    b.Navigation("ServerApplications");
                });

            modelBuilder.Entity("Poseidon.Entities.ResourceMaps.Servers.Server", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
