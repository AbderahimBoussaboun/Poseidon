// <auto-generated />
using System;
using CodeFirstExistingDatabaseSample;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeFirstExistingDatabaseSample.Migrations
{
    [DbContext(typeof(PruebaContext))]
    [Migration("20231103092154_NewMigrations")]
    partial class NewMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Applications_ProductId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Balancer", b =>
                {
                    b.Property<Guid>("BalancerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ports")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BalancerId");

                    b.ToTable("Balancers");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Component", b =>
                {
                    b.Property<Guid>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BalancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ports")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ComponentId");

                    b.HasIndex(new[] { "BalancerId" }, "IX_Components_BalancerId");

                    b.HasIndex(new[] { "ComponentTypeId" }, "IX_Components_ComponentTypeId");

                    b.HasIndex(new[] { "SubApplicationId" }, "IX_Components_SubApplicationId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.ComponetType", b =>
                {
                    b.Property<Guid>("ComponentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentTypeId");

                    b.ToTable("ComponetTypes");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Environment", b =>
                {
                    b.Property<Guid>("EnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Infraestructure", b =>
                {
                    b.Property<Guid>("InfraestructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InfraestructureId");

                    b.ToTable("Infraestructures");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Irule", b =>
                {
                    b.Property<Guid>("IruleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Redirect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IruleId");

                    b.HasIndex("RuleId");

                    b.ToTable("Irules");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Monitor", b =>
                {
                    b.Property<Guid>("MonitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Adaptive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cipherlist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Compatibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Debug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultsFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Defaults_from");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Get")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("get");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpDscp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IP_DSCP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RECV");

                    b.Property<string>("RecvDisable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RECV_disable");

                    b.Property<string>("Reverse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Send")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SEND");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SslProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ssl_profile");

                    b.Property<string>("TimeUntilUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("time_until_up");

                    b.Property<string>("Timeout")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("timeout");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("MonitorId");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Node", b =>
                {
                    b.Property<Guid>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NodeId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.NodePool", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NodeId", "PoolId");

                    b.HasIndex("PoolId");

                    b.ToTable("NodePool", (string)null);
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Pool", b =>
                {
                    b.Property<Guid>("PoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BalancerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MonitorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PoolId");

                    b.HasIndex("MonitorId");

                    b.ToTable("Pools");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.HasIndex(new[] { "ServerId" }, "IX_Roles_ServerId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Rule", b =>
                {
                    b.Property<Guid>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VirtualId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RuleId");

                    b.HasIndex("VirtualId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Server", b =>
                {
                    b.Property<Guid>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Os")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OS");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServerId");

                    b.HasIndex(new[] { "EnvironmentId" }, "IX_Servers_EnvironmentId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Servers_ProductId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.ServerApplication", b =>
                {
                    b.Property<Guid>("ServerApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServerApplicationId");

                    b.HasIndex(new[] { "ComponentId" }, "IX_ServerApplications_ComponentId")
                        .IsUnique()
                        .HasFilter("([ComponentId] IS NOT NULL)");

                    b.HasIndex(new[] { "RoleId" }, "IX_ServerApplications_RoleId");

                    b.ToTable("ServerApplications");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.SubApplication", b =>
                {
                    b.Property<Guid>("SubApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubApplicationId");

                    b.HasIndex(new[] { "ApplicationId" }, "IX_SubApplications_ApplicationId");

                    b.ToTable("SubApplications");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Virtual", b =>
                {
                    b.Property<Guid>("VirtualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateDisable")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModify")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VirtualId");

                    b.HasIndex("PoolId");

                    b.ToTable("Virtuals");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Application", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Product", "Product")
                        .WithMany("Applications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Component", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Balancer", "Balancer")
                        .WithMany("Components")
                        .HasForeignKey("BalancerId");

                    b.HasOne("CodeFirstExistingDatabaseSample.ComponetType", "ComponentType")
                        .WithMany("Components")
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFirstExistingDatabaseSample.SubApplication", "SubApplication")
                        .WithMany("Components")
                        .HasForeignKey("SubApplicationId")
                        .IsRequired();

                    b.Navigation("Balancer");

                    b.Navigation("ComponentType");

                    b.Navigation("SubApplication");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Irule", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Rule", "Rule")
                        .WithMany("Irules")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.NodePool", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Node", "Node")
                        .WithMany("NodePools")
                        .HasForeignKey("NodeId")
                        .IsRequired();

                    b.HasOne("CodeFirstExistingDatabaseSample.Pool", "Pool")
                        .WithMany("NodePools")
                        .HasForeignKey("PoolId")
                        .IsRequired();

                    b.Navigation("Node");

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Pool", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Monitor", "Monitor")
                        .WithMany("Pools")
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Monitor");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Role", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Server", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Rule", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Virtual", "Virtual")
                        .WithMany("Rules")
                        .HasForeignKey("VirtualId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Virtual");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Server", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Environment", "Environment")
                        .WithMany("Servers")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFirstExistingDatabaseSample.Product", "Product")
                        .WithMany("Servers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.ServerApplication", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Component", "Component")
                        .WithOne("ServerApplication")
                        .HasForeignKey("CodeFirstExistingDatabaseSample.ServerApplication", "ComponentId");

                    b.HasOne("CodeFirstExistingDatabaseSample.Role", "Role")
                        .WithMany("ServerApplications")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.SubApplication", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Application", "Application")
                        .WithMany("SubApplications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Virtual", b =>
                {
                    b.HasOne("CodeFirstExistingDatabaseSample.Pool", "Pool")
                        .WithMany("Virtuals")
                        .HasForeignKey("PoolId");

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Application", b =>
                {
                    b.Navigation("SubApplications");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Balancer", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Component", b =>
                {
                    b.Navigation("ServerApplication");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.ComponetType", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Environment", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Monitor", b =>
                {
                    b.Navigation("Pools");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Node", b =>
                {
                    b.Navigation("NodePools");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Pool", b =>
                {
                    b.Navigation("NodePools");

                    b.Navigation("Virtuals");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Product", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Servers");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Role", b =>
                {
                    b.Navigation("ServerApplications");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Rule", b =>
                {
                    b.Navigation("Irules");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Server", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.SubApplication", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("CodeFirstExistingDatabaseSample.Virtual", b =>
                {
                    b.Navigation("Rules");
                });
#pragma warning restore 612, 618
        }
    }
}
