//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .//ConsoleApp2//ANTLR//BigIPConfigParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BigIPConfigParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		RECORD_PRE=1, TYPE=2, RECORD_POST=3, LBRACE=4, RBRACE=5, DASH=6, SLASH=7, 
		ANY=8, WS=9, NEWLINE=10;
	public const int
		RULE_config = 0, RULE_record = 1, RULE_recordContent = 2, RULE_recordStart = 3, 
		RULE_contentItem = 4, RULE_notRBrace = 5, RULE_notRecord = 6;
	public static readonly string[] ruleNames = {
		"config", "record", "recordContent", "recordStart", "contentItem", "notRBrace", 
		"notRecord"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'{'", "'}'", "'-'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "RECORD_PRE", "TYPE", "RECORD_POST", "LBRACE", "RBRACE", "DASH", 
		"SLASH", "ANY", "WS", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BigIPConfigParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BigIPConfigParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BigIPConfigParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BigIPConfigParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ConfigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BigIPConfigParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordContext[] record() {
			return GetRuleContexts<RecordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordContext record(int i) {
			return GetRuleContext<RecordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotRecordContext[] notRecord() {
			return GetRuleContexts<NotRecordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotRecordContext notRecord(int i) {
			return GetRuleContext<NotRecordContext>(i);
		}
		public ConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.EnterConfig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.ExitConfig(this);
		}
	}

	[RuleVersion(0)]
	public ConfigContext config() {
		ConfigContext _localctx = new ConfigContext(Context, State);
		EnterRule(_localctx, 0, RULE_config);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2046L) != 0)) {
				{
				State = 16;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 14;
					record();
					}
					break;
				case 2:
					{
					State = 15;
					notRecord();
					}
					break;
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 21;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordStartContext recordStart() {
			return GetRuleContext<RecordStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordContentContext recordContent() {
			return GetRuleContext<RecordContentContext>(0);
		}
		public RecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.EnterRecord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.ExitRecord(this);
		}
	}

	[RuleVersion(0)]
	public RecordContext record() {
		RecordContext _localctx = new RecordContext(Context, State);
		EnterRule(_localctx, 2, RULE_record);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			recordStart();
			State = 24;
			recordContent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(BigIPConfigParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BigIPConfigParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContentItemContext[] contentItem() {
			return GetRuleContexts<ContentItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentItemContext contentItem(int i) {
			return GetRuleContext<ContentItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotRBraceContext[] notRBrace() {
			return GetRuleContexts<NotRBraceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotRBraceContext notRBrace(int i) {
			return GetRuleContext<NotRBraceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(BigIPConfigParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(BigIPConfigParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(BigIPConfigParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(BigIPConfigParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(BigIPConfigParser.ANY, 0); }
		public RecordContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.EnterRecordContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.ExitRecordContent(this);
		}
	}

	[RuleVersion(0)]
	public RecordContentContext recordContent() {
		RecordContentContext _localctx = new RecordContentContext(Context, State);
		EnterRule(_localctx, 4, RULE_recordContent);
		int _la;
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				Match(LBRACE);
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2014L) != 0)) {
					{
					State = 31;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						State = 27;
						contentItem();
						}
						break;
					case 2:
						{
						State = 28;
						notRBrace();
						}
						break;
					case 3:
						{
						State = 29;
						Match(NEWLINE);
						}
						break;
					case 4:
						{
						State = 30;
						Match(WS);
						}
						break;
					}
					}
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 36;
				Match(RBRACE);
				}
				break;
			case ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				Match(ANY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECORD_PRE() { return GetToken(BigIPConfigParser.RECORD_PRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BigIPConfigParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECORD_POST() { return GetToken(BigIPConfigParser.RECORD_POST, 0); }
		public RecordStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.EnterRecordStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.ExitRecordStart(this);
		}
	}

	[RuleVersion(0)]
	public RecordStartContext recordStart() {
		RecordStartContext _localctx = new RecordStartContext(Context, State);
		EnterRule(_localctx, 6, RULE_recordStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(RECORD_PRE);
			State = 41;
			Match(TYPE);
			State = 42;
			Match(RECORD_POST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RecordContentContext recordContent() {
			return GetRuleContext<RecordContentContext>(0);
		}
		public ContentItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contentItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.EnterContentItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.ExitContentItem(this);
		}
	}

	[RuleVersion(0)]
	public ContentItemContext contentItem() {
		ContentItemContext _localctx = new ContentItemContext(Context, State);
		EnterRule(_localctx, 8, RULE_contentItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			recordContent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotRBraceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BigIPConfigParser.RBRACE, 0); }
		public NotRBraceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notRBrace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.EnterNotRBrace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.ExitNotRBrace(this);
		}
	}

	[RuleVersion(0)]
	public NotRBraceContext notRBrace() {
		NotRBraceContext _localctx = new NotRBraceContext(Context, State);
		EnterRule(_localctx, 10, RULE_notRBrace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_la = TokenStream.LA(1);
			if ( _la <= 0 || (_la==RBRACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotRecordContext : ParserRuleContext {
		public NotRecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notRecord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.EnterNotRecord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBigIPConfigParserListener typedListener = listener as IBigIPConfigParserListener;
			if (typedListener != null) typedListener.ExitNotRecord(this);
		}
	}

	[RuleVersion(0)]
	public NotRecordContext notRecord() {
		NotRecordContext _localctx = new NotRecordContext(Context, State);
		EnterRule(_localctx, 12, RULE_notRecord);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 48;
					MatchWildcard();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,10,54,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,5,0,17,8,0,10,0,12,0,20,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
		2,5,2,32,8,2,10,2,12,2,35,9,2,1,2,1,2,3,2,39,8,2,1,3,1,3,1,3,1,3,1,4,1,
		4,1,5,1,5,1,6,4,6,50,8,6,11,6,12,6,51,1,6,1,51,0,7,0,2,4,6,8,10,12,0,1,
		1,0,5,5,54,0,18,1,0,0,0,2,23,1,0,0,0,4,38,1,0,0,0,6,40,1,0,0,0,8,44,1,
		0,0,0,10,46,1,0,0,0,12,49,1,0,0,0,14,17,3,2,1,0,15,17,3,12,6,0,16,14,1,
		0,0,0,16,15,1,0,0,0,17,20,1,0,0,0,18,16,1,0,0,0,18,19,1,0,0,0,19,21,1,
		0,0,0,20,18,1,0,0,0,21,22,5,0,0,1,22,1,1,0,0,0,23,24,3,6,3,0,24,25,3,4,
		2,0,25,3,1,0,0,0,26,33,5,4,0,0,27,32,3,8,4,0,28,32,3,10,5,0,29,32,5,10,
		0,0,30,32,5,9,0,0,31,27,1,0,0,0,31,28,1,0,0,0,31,29,1,0,0,0,31,30,1,0,
		0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,36,1,0,0,0,35,33,1,0,
		0,0,36,39,5,5,0,0,37,39,5,8,0,0,38,26,1,0,0,0,38,37,1,0,0,0,39,5,1,0,0,
		0,40,41,5,1,0,0,41,42,5,2,0,0,42,43,5,3,0,0,43,7,1,0,0,0,44,45,3,4,2,0,
		45,9,1,0,0,0,46,47,8,0,0,0,47,11,1,0,0,0,48,50,9,0,0,0,49,48,1,0,0,0,50,
		51,1,0,0,0,51,52,1,0,0,0,51,49,1,0,0,0,52,13,1,0,0,0,6,16,18,31,33,38,
		51
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
